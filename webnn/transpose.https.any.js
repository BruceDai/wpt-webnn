// META: title=test WebNN API transpose operation
// META: global=window,dedicatedworker
// META: script=./resources/utils.js
// META: timeout=long

'use strict';

// https://webmachinelearning.github.io/webnn/#api-mlgraphbuilder-transpose

let context;
let builder;

const testTranspose = async (syncFlag, inputShape, inputData, expectedShape, expected, permutation = undefined) => {
  const x = builder.input('x', {type: 'float32', dimensions: inputShape});
  const y = builder.transpose(x, {permutation});
  const inputs = {'x': new Float32Array(inputData)};
  const outputs = {'y': new Float32Array(sizeOfShape(expectedShape))};
  let graph;

  if (syncFlag) {
    graph = builder.build({y});
    context.compute(graph, inputs, outputs);
  } else {
    graph = await builder.buildAsync({y});
    await context.computeAsync(graph, inputs, outputs);
  }

  assert_array_approx_equals_ulp(outputs.y, expected, ULPTolerance.float32.transpose, 'float32');
};

ExecutionArray.forEach(executionType => {
  const isSync = executionType === 'sync';
  if (self.GLOBAL.isWindow() && isSync) {
    return;
  }

  const targetDeviceTypeArray = getTargetDeviceTypeArray();
  targetDeviceTypeArray.forEach(deviceType => {
    promise_setup(async () => {
      await navigator.ml.createContext({deviceType}).then((ret) => context = ret);
      builder = new MLGraphBuilder(context);
    });

    promise_test(async () => {
      const inputData = [
        0.43376675, 0.264609,   0.26321858, 0.04260185, 0.6862414,  0.26150206,
        0.04169406, 0.24857993, 0.14914423, 0.19905873, 0.33851373, 0.74131566,
        0.91501445, 0.21852633, 0.02267954, 0.22069663, 0.95799077, 0.17188412,
        0.09732241, 0.03296741, 0.04709655, 0.50648814, 0.13075736, 0.82511896,
      ];
      // transpose 2D
      const expected2D = [
        0.43376675, 0.04169406, 0.91501445, 0.09732241,
        0.264609,   0.24857993, 0.21852633, 0.03296741,
        0.26321858, 0.14914423, 0.02267954, 0.04709655,
        0.04260185, 0.19905873, 0.22069663, 0.50648814,
        0.6862414,  0.33851373, 0.95799077, 0.13075736,
        0.26150206, 0.74131566, 0.17188412, 0.82511896,
      ];
      await testTranspose(isSync, [4, 6], inputData, [6, 4], expected2D);
      // transpose 3D
      const expected3D = [
        0.43376675, 0.91501445, 0.6862414,  0.95799077, 0.14914423, 0.04709655,
        0.264609,   0.21852633, 0.26150206, 0.17188412, 0.19905873, 0.50648814,
        0.26321858, 0.02267954, 0.04169406, 0.09732241, 0.33851373, 0.13075736,
        0.04260185, 0.22069663, 0.24857993, 0.03296741, 0.74131566, 0.82511896,
      ];
      await testTranspose(isSync, [2, 3, 4], inputData, [4, 3, 2], expected3D);
      // transpose 4D
      const expected4D = [
        0.43376675, 0.91501445, 0.6862414,  0.95799077, 0.14914423, 0.04709655,
        0.26321858, 0.02267954, 0.04169406, 0.09732241, 0.33851373, 0.13075736,
        0.264609,   0.21852633, 0.26150206, 0.17188412, 0.19905873, 0.50648814,
        0.04260185, 0.22069663, 0.24857993, 0.03296741, 0.74131566, 0.82511896,
      ];
      await testTranspose(isSync, [2, 3, 2, 2], inputData, [2, 2, 3, 2], expected4D);
      // transpose 5D
      const expected5D = [
        0.43376675, 0.91501445, 0.6862414,  0.95799077, 0.14914423, 0.04709655,
        0.264609,   0.21852633, 0.26150206, 0.17188412, 0.19905873, 0.50648814,
        0.26321858, 0.02267954, 0.04169406, 0.09732241, 0.33851373, 0.13075736,
        0.04260185, 0.22069663, 0.24857993, 0.03296741, 0.74131566, 0.82511896,
      ];
      await testTranspose(isSync, [1, 2, 3, 4, 1], inputData, [1, 4, 3, 2, 1], expected5D);
    }, `test transpose with default permutations options / ${deviceType} / ${executionType}`);

    promise_test(async () => {
      const inputData = [
        0.7760998,  0.8363521,  0.10145967, 0.00533229, 0.8190919,  0.83241564,
        0.39479077, 0.5622921,  0.9306249,  0.00480607, 0.39600816, 0.35415828,
        0.43689877, 0.7603583,  0.14368972, 0.11940759, 0.4834097,  0.6982117,
        0.7195266,  0.72893023, 0.896649,   0.13060148, 0.07824122, 0.33766487,
      ];
      // transpose 2D
      const permutations2D = [[0, 1], [1, 0]];
      const inputShape2D = [4, 6];
      const expectedShapes2D = [[4, 6], [6, 4]];
      const expecteds2D = [
        [
          0.7760998,  0.8363521,  0.10145967, 0.00533229, 0.8190919,  0.83241564,
          0.39479077, 0.5622921,  0.9306249,  0.00480607, 0.39600816, 0.35415828,
          0.43689877, 0.7603583,  0.14368972, 0.11940759, 0.4834097,  0.6982117,
          0.7195266,  0.72893023, 0.896649,   0.13060148, 0.07824122, 0.33766487,
        ],
        [
          0.7760998,  0.39479077, 0.43689877, 0.7195266,
          0.8363521,  0.5622921,  0.7603583,  0.72893023,
          0.10145967, 0.9306249,  0.14368972, 0.896649,
          0.00533229, 0.00480607, 0.11940759, 0.13060148,
          0.8190919,  0.39600816, 0.4834097,  0.07824122,
          0.83241564, 0.35415828, 0.6982117,  0.33766487,
        ],
      ];
      for (let i = 0; i < permutations2D.length; ++i) {
        await testTranspose(isSync, inputShape2D, inputData, expectedShapes2D[i], expecteds2D[i], permutations2D[i]);
      }
      // transpose 3D
      const permutations3D = [[0, 1, 2], [0, 2, 1], [1, 0, 2], [1, 2, 0], [2, 0, 1], [2, 1, 0]];
      const inputShape3D = [2, 3, 4];
      const expectedShapes3D = [[2, 3, 4], [2, 4, 3], [3, 2, 4], [3, 4, 2], [4, 2, 3], [4, 3, 2]];
      const expecteds3D = [
        [
          0.7760998,  0.8363521,  0.10145967, 0.00533229, 0.8190919,  0.83241564,
          0.39479077, 0.5622921,  0.9306249,  0.00480607, 0.39600816, 0.35415828,
          0.43689877, 0.7603583,  0.14368972, 0.11940759, 0.4834097,  0.6982117,
          0.7195266,  0.72893023, 0.896649,   0.13060148, 0.07824122, 0.33766487,
        ],
        [
          0.7760998,  0.8190919,  0.9306249,  0.8363521,  0.83241564, 0.00480607,
          0.10145967, 0.39479077, 0.39600816, 0.00533229, 0.5622921,  0.35415828,
          0.43689877, 0.4834097,  0.896649,   0.7603583,  0.6982117,  0.13060148,
          0.14368972, 0.7195266,  0.07824122, 0.11940759, 0.72893023, 0.33766487,
        ],
        [
          0.7760998,  0.8363521,  0.10145967, 0.00533229, 0.43689877, 0.7603583,
          0.14368972, 0.11940759, 0.8190919,  0.83241564, 0.39479077, 0.5622921,
          0.4834097,  0.6982117,  0.7195266,  0.72893023, 0.9306249,  0.00480607,
          0.39600816, 0.35415828, 0.896649,   0.13060148, 0.07824122, 0.33766487,
        ],
        [
          0.7760998,  0.43689877, 0.8363521,  0.7603583,  0.10145967, 0.14368972,
          0.00533229, 0.11940759, 0.8190919,  0.4834097,  0.83241564, 0.6982117,
          0.39479077, 0.7195266,  0.5622921,  0.72893023, 0.9306249,  0.896649,
          0.00480607, 0.13060148, 0.39600816, 0.07824122, 0.35415828, 0.33766487,
        ],
        [
          0.7760998,  0.8190919,  0.9306249,  0.43689877, 0.4834097,  0.896649,
          0.8363521,  0.83241564, 0.00480607, 0.7603583,  0.6982117,  0.13060148,
          0.10145967, 0.39479077, 0.39600816, 0.14368972, 0.7195266,  0.07824122,
          0.00533229, 0.5622921,  0.35415828, 0.11940759, 0.72893023, 0.33766487,
        ],
        [
          0.7760998,  0.43689877, 0.8190919,  0.4834097,  0.9306249,  0.896649,
          0.8363521,  0.7603583,  0.83241564, 0.6982117,  0.00480607, 0.13060148,
          0.10145967, 0.14368972, 0.39479077, 0.7195266,  0.39600816, 0.07824122,
          0.00533229, 0.11940759, 0.5622921,  0.72893023, 0.35415828, 0.33766487,
        ],
      ];
      for (let i = 0; i < permutations3D.length; ++i) {
        await testTranspose(isSync, inputShape3D, inputData, expectedShapes3D[i], expecteds3D[i], permutations3D[i]);
      }
      // transpose 4D
      const permutations4D = [
        [0, 1, 2, 3], [0, 1, 3, 2], [0, 2, 1, 3], [0, 2, 3, 1], [0, 3, 1, 2], [0, 3, 2, 1],
        [1, 0, 2, 3], [1, 0, 3, 2], [1, 2, 0, 3], [1, 2, 3, 0], [1, 3, 0, 2], [1, 3, 2, 0],
        [2, 0, 1, 3], [2, 0, 3, 1], [2, 1, 0, 3], [2, 1, 3, 0], [2, 3, 0, 1], [2, 3, 1, 0],
        [3, 0, 1, 2], [3, 0, 2, 1], [3, 1, 0, 2], [3, 1, 2, 0], [3, 2, 0, 1], [3, 2, 1, 0],
      ];
      const inputShape4D = [1, 2, 3, 4];
      const expectedShapes4D = [
        [1, 2, 3, 4], [1, 2, 4, 3], [1, 3, 2, 4], [1, 3, 4, 2], [1, 4, 2, 3], [1, 4, 3, 2],
        [2, 1, 3, 4], [2, 1, 4, 3], [2, 3, 1, 4], [2, 3, 4, 1], [2, 4, 1, 3], [2, 4, 3, 1],
        [3, 1, 2, 4], [3, 1, 4, 2], [3, 2, 1, 4], [3, 2, 4, 1], [3, 4, 1, 2], [3, 4, 2, 1],
        [4, 1, 2, 3], [4, 1, 3, 2], [4, 2, 1, 3], [4, 2, 3, 1], [4, 3, 1, 2], [4, 3, 2, 1],
      ];
      const expecteds4D = [
        [
          0.7760998,  0.8363521,  0.10145967, 0.00533229, 0.8190919,  0.83241564,
          0.39479077, 0.5622921,  0.9306249,  0.00480607, 0.39600816, 0.35415828,
          0.43689877, 0.7603583,  0.14368972, 0.11940759, 0.4834097,  0.6982117,
          0.7195266,  0.72893023, 0.896649,   0.13060148, 0.07824122, 0.33766487,
        ],
        [
          0.7760998,  0.8190919,  0.9306249,  0.8363521,  0.83241564, 0.00480607,
          0.10145967, 0.39479077, 0.39600816, 0.00533229, 0.5622921,  0.35415828,
          0.43689877, 0.4834097,  0.896649,   0.7603583,  0.6982117,  0.13060148,
          0.14368972, 0.7195266,  0.07824122, 0.11940759, 0.72893023, 0.33766487,
        ],
        [
          0.7760998,  0.8363521,  0.10145967, 0.00533229, 0.43689877, 0.7603583,
          0.14368972, 0.11940759, 0.8190919,  0.83241564, 0.39479077, 0.5622921,
          0.4834097,  0.6982117,  0.7195266,  0.72893023, 0.9306249,  0.00480607,
          0.39600816, 0.35415828, 0.896649,   0.13060148, 0.07824122, 0.33766487,
        ],
        [
          0.7760998,  0.43689877, 0.8363521,  0.7603583,  0.10145967, 0.14368972,
          0.00533229, 0.11940759, 0.8190919,  0.4834097,  0.83241564, 0.6982117,
          0.39479077, 0.7195266,  0.5622921,  0.72893023, 0.9306249,  0.896649,
          0.00480607, 0.13060148, 0.39600816, 0.07824122, 0.35415828, 0.33766487,
        ],
        [
          0.7760998,  0.8190919,  0.9306249,  0.43689877, 0.4834097,  0.896649,
          0.8363521,  0.83241564, 0.00480607, 0.7603583,  0.6982117,  0.13060148,
          0.10145967, 0.39479077, 0.39600816, 0.14368972, 0.7195266,  0.07824122,
          0.00533229, 0.5622921,  0.35415828, 0.11940759, 0.72893023, 0.33766487,
        ],
        [
          0.7760998,  0.43689877, 0.8190919,  0.4834097,  0.9306249,  0.896649,
          0.8363521,  0.7603583,  0.83241564, 0.6982117,  0.00480607, 0.13060148,
          0.10145967, 0.14368972, 0.39479077, 0.7195266,  0.39600816, 0.07824122,
          0.00533229, 0.11940759, 0.5622921,  0.72893023, 0.35415828, 0.33766487,
        ],
        [
          0.7760998,  0.8363521,  0.10145967, 0.00533229, 0.8190919,  0.83241564,
          0.39479077, 0.5622921,  0.9306249,  0.00480607, 0.39600816, 0.35415828,
          0.43689877, 0.7603583,  0.14368972, 0.11940759, 0.4834097,  0.6982117,
          0.7195266,  0.72893023, 0.896649,   0.13060148, 0.07824122, 0.33766487,
        ],
        [
          0.7760998,  0.8190919,  0.9306249,  0.8363521,  0.83241564, 0.00480607,
          0.10145967, 0.39479077, 0.39600816, 0.00533229, 0.5622921,  0.35415828,
          0.43689877, 0.4834097,  0.896649,   0.7603583,  0.6982117,  0.13060148,
          0.14368972, 0.7195266,  0.07824122, 0.11940759, 0.72893023, 0.33766487,
        ],
        [
          0.7760998,  0.8363521,  0.10145967, 0.00533229, 0.8190919,  0.83241564,
          0.39479077, 0.5622921,  0.9306249,  0.00480607, 0.39600816, 0.35415828,
          0.43689877, 0.7603583,  0.14368972, 0.11940759, 0.4834097,  0.6982117,
          0.7195266,  0.72893023, 0.896649,   0.13060148, 0.07824122, 0.33766487,
        ],
        [
          0.7760998,  0.8363521,  0.10145967, 0.00533229, 0.8190919,  0.83241564,
          0.39479077, 0.5622921,  0.9306249,  0.00480607, 0.39600816, 0.35415828,
          0.43689877, 0.7603583,  0.14368972, 0.11940759, 0.4834097,  0.6982117,
          0.7195266,  0.72893023, 0.896649,   0.13060148, 0.07824122, 0.33766487,
        ],
        [
          0.7760998,  0.8190919,  0.9306249,  0.8363521,  0.83241564, 0.00480607,
          0.10145967, 0.39479077, 0.39600816, 0.00533229, 0.5622921,  0.35415828,
          0.43689877, 0.4834097,  0.896649,   0.7603583,  0.6982117,  0.13060148,
          0.14368972, 0.7195266,  0.07824122, 0.11940759, 0.72893023, 0.33766487,
        ],
        [
          0.7760998,  0.8190919,  0.9306249,  0.8363521,  0.83241564, 0.00480607,
          0.10145967, 0.39479077, 0.39600816, 0.00533229, 0.5622921,  0.35415828,
          0.43689877, 0.4834097,  0.896649,   0.7603583,  0.6982117,  0.13060148,
          0.14368972, 0.7195266,  0.07824122, 0.11940759, 0.72893023, 0.33766487,
        ],
        [
          0.7760998, 0.8363521, 0.10145967, 0.00533229, 0.43689877, 0.7603583,
          0.14368972, 0.11940759, 0.8190919, 0.83241564, 0.39479077, 0.5622921,
          0.4834097, 0.6982117, 0.7195266, 0.72893023, 0.9306249, 0.00480607,
          0.39600816, 0.35415828, 0.896649, 0.13060148, 0.07824122, 0.33766487,
        ],
        [
          0.7760998,  0.43689877, 0.8363521,  0.7603583,  0.10145967, 0.14368972,
          0.00533229, 0.11940759, 0.8190919,  0.4834097,  0.83241564, 0.6982117,
          0.39479077, 0.7195266,  0.5622921,  0.72893023, 0.9306249,  0.896649,
          0.00480607, 0.13060148, 0.39600816, 0.07824122, 0.35415828, 0.33766487,
        ],
        [
          0.7760998,  0.8363521,  0.10145967, 0.00533229, 0.43689877, 0.7603583,
          0.14368972, 0.11940759, 0.8190919,  0.83241564, 0.39479077, 0.5622921,
          0.4834097,  0.6982117,  0.7195266,  0.72893023, 0.9306249,  0.00480607,
          0.39600816, 0.35415828, 0.896649,   0.13060148, 0.07824122, 0.33766487,
        ],
        [
          0.7760998,  0.8363521,  0.10145967, 0.00533229, 0.43689877, 0.7603583,
          0.14368972, 0.11940759, 0.8190919,  0.83241564, 0.39479077, 0.5622921,
          0.4834097,  0.6982117,  0.7195266,  0.72893023, 0.9306249,  0.00480607,
          0.39600816, 0.35415828, 0.896649,   0.13060148, 0.07824122, 0.33766487,
        ],
        [
          0.7760998,  0.43689877, 0.8363521,  0.7603583,  0.10145967, 0.14368972,
          0.00533229, 0.11940759, 0.8190919,  0.4834097,  0.83241564, 0.6982117,
          0.39479077, 0.7195266,  0.5622921,  0.72893023, 0.9306249,  0.896649,
          0.00480607, 0.13060148, 0.39600816, 0.07824122, 0.35415828, 0.33766487,
        ],
        [
          0.7760998,  0.43689877, 0.8363521,  0.7603583,  0.10145967, 0.14368972,
          0.00533229, 0.11940759, 0.8190919,  0.4834097,  0.83241564, 0.6982117,
          0.39479077, 0.7195266,  0.5622921,  0.72893023, 0.9306249,  0.896649,
          0.00480607, 0.13060148, 0.39600816, 0.07824122, 0.35415828, 0.33766487,
        ],
        [
          0.7760998,  0.8190919,  0.9306249,  0.43689877, 0.4834097,  0.896649,
          0.8363521,  0.83241564, 0.00480607, 0.7603583,  0.6982117,  0.13060148,
          0.10145967, 0.39479077, 0.39600816, 0.14368972, 0.7195266,  0.07824122,
          0.00533229, 0.5622921,  0.35415828, 0.11940759, 0.72893023, 0.33766487,
        ],
        [
          0.7760998,  0.43689877, 0.8190919,  0.4834097,  0.9306249,  0.896649,
          0.8363521,  0.7603583,  0.83241564, 0.6982117,  0.00480607, 0.13060148,
          0.10145967, 0.14368972, 0.39479077, 0.7195266,  0.39600816, 0.07824122,
          0.00533229, 0.11940759, 0.5622921,  0.72893023, 0.35415828, 0.33766487,
        ],
        [
          0.7760998,  0.8190919,  0.9306249,  0.43689877, 0.4834097,  0.896649,
          0.8363521,  0.83241564, 0.00480607, 0.7603583,  0.6982117,  0.13060148,
          0.10145967, 0.39479077, 0.39600816, 0.14368972, 0.7195266,  0.07824122,
          0.00533229, 0.5622921,  0.35415828, 0.11940759, 0.72893023, 0.33766487,
        ],
        [
          0.7760998,  0.8190919,  0.9306249,  0.43689877, 0.4834097,  0.896649,
          0.8363521,  0.83241564, 0.00480607, 0.7603583,  0.6982117,  0.13060148,
          0.10145967, 0.39479077, 0.39600816, 0.14368972, 0.7195266,  0.07824122,
          0.00533229, 0.5622921,  0.35415828, 0.11940759, 0.72893023, 0.33766487,
        ],
        [
          0.7760998,  0.43689877, 0.8190919,  0.4834097,  0.9306249,  0.896649,
          0.8363521,  0.7603583,  0.83241564, 0.6982117,  0.00480607, 0.13060148,
          0.10145967, 0.14368972, 0.39479077, 0.7195266,  0.39600816, 0.07824122,
          0.00533229, 0.11940759, 0.5622921,  0.72893023, 0.35415828, 0.33766487,
        ],
        [
          0.7760998,  0.43689877, 0.8190919,  0.4834097,  0.9306249,  0.896649,
          0.8363521,  0.7603583,  0.83241564, 0.6982117,  0.00480607, 0.13060148,
          0.10145967, 0.14368972, 0.39479077, 0.7195266,  0.39600816, 0.07824122,
          0.00533229, 0.11940759, 0.5622921,  0.72893023, 0.35415828, 0.33766487,
        ],
      ];
      for (let i = 0; i < permutations4D.length; ++i) {
        await testTranspose(isSync, inputShape4D, inputData, expectedShapes4D[i], expecteds4D[i], permutations4D[i]);
      }
      // transpose 5D
      // test 5 among of all 120 permutation
      const permutations5D = [
        [0, 2, 3, 4, 1], [1, 3, 4, 2, 0], [2, 0, 4, 1, 3], [3, 4, 0, 2, 1], [4, 1, 0, 3, 2],
      ];
      const inputShape5D = [1, 2, 1, 3, 4];
      const expectedShapes5D = [
        [1, 1, 3, 4, 2], [2, 3, 4, 1, 1], [1, 1, 4, 2, 3], [3, 4, 1, 1, 2], [4, 2, 1, 3, 1],
      ];
      const expecteds5D = [
        [
          0.7760998,  0.43689877, 0.8363521,  0.7603583,  0.10145967, 0.14368972,
          0.00533229, 0.11940759, 0.8190919,  0.4834097,  0.83241564, 0.6982117,
          0.39479077, 0.7195266,  0.5622921,  0.72893023, 0.9306249,  0.896649,
          0.00480607, 0.13060148, 0.39600816, 0.07824122, 0.35415828, 0.33766487,
        ],
        [
          0.7760998,  0.8363521,  0.10145967, 0.00533229, 0.8190919,  0.83241564,
          0.39479077, 0.5622921,  0.9306249,  0.00480607, 0.39600816, 0.35415828,
          0.43689877, 0.7603583,  0.14368972, 0.11940759, 0.4834097,  0.6982117,
          0.7195266,  0.72893023, 0.896649,   0.13060148, 0.07824122, 0.33766487,
        ],
        [
          0.7760998,  0.8190919,  0.9306249,  0.43689877, 0.4834097,  0.896649,
          0.8363521,  0.83241564, 0.00480607, 0.7603583,  0.6982117,  0.13060148,
          0.10145967, 0.39479077, 0.39600816, 0.14368972, 0.7195266,  0.07824122,
          0.00533229, 0.5622921,  0.35415828, 0.11940759, 0.72893023, 0.33766487,
        ],
        [
          0.7760998,  0.43689877, 0.8363521,  0.7603583,  0.10145967, 0.14368972,
          0.00533229, 0.11940759, 0.8190919,  0.4834097,  0.83241564, 0.6982117,
          0.39479077, 0.7195266,  0.5622921,  0.72893023, 0.9306249,  0.896649,
          0.00480607, 0.13060148, 0.39600816, 0.07824122, 0.35415828, 0.33766487,
        ],
        [
          0.7760998,  0.8190919,  0.9306249,  0.43689877, 0.4834097,  0.896649,
          0.8363521,  0.83241564, 0.00480607, 0.7603583,  0.6982117,  0.13060148,
          0.10145967, 0.39479077, 0.39600816, 0.14368972, 0.7195266,  0.07824122,
          0.00533229, 0.5622921,  0.35415828, 0.11940759, 0.72893023, 0.33766487,
        ],
      ];
      for (let i = 0; i < permutations5D.length; ++i) {
        await testTranspose(isSync, inputShape5D, inputData, expectedShapes5D[i], expecteds5D[i], permutations5D[i]);
      }
    }, `test transpose with specified permutations options / ${deviceType} / ${executionType}`);
  });
});
