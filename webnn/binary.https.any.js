// META: title=test WebNN API element-wise binary operations
// META: global=window,dedicatedworker
// META: script=./resources/utils.js
// META: timeout=long

'use strict';

// https://webmachinelearning.github.io/webnn/#api-mlgraphbuilder-binary

let context;
let builder;

async function testBinary(syncFlag, op, inputA, inputB, isInputBConstant, expected) {
  const x = builder.input('x', {type: 'float32', dimensions: inputA.shape});
  let y;
  let inputs;

  if (isInputBConstant) {
    y = builder.constant(
      {type: 'float32', dimensions: inputB.shape}, new Float32Array(inputB.data));
    inputs = {'x': new Float32Array(inputA.data)};
  } else {
    y = builder.input('y', {type: 'float32', dimensions: inputB.shape});
    inputs = {'x': new Float32Array(inputA.data), 'y': new Float32Array(inputB.data)};
  }

  const z = builder[op](x, y);
  const outputs = {'z': new Float32Array(sizeOfShape(expected.shape))};
  let graph;

  if (syncFlag) {
    graph = builder.build({z});
    context.compute(graph, inputs, outputs);
  } else {
    graph = await builder.buildAsync({z});
    await context.computeAsync(graph, inputs, outputs);
  }

  assert_array_approx_equals_ulp(outputs.z, expected.data, ULPTolerance.float32[op], 'float32');
}

ExecutionArray.forEach(executionType => {
  const isSync = executionType === 'sync';
  if (self.GLOBAL.isWindow() && isSync) {
    return;
  }

  const targetDeviceTypeArray = getTargetDeviceTypeArray();
  targetDeviceTypeArray.forEach(deviceType => {
    promise_setup(async () => {
      await navigator.ml.createContext({deviceType}).then((ret) => context = ret);
      builder = new MLGraphBuilder(context);
    });

    // data for testing add op
    const a = {
      shape: [3, 4, 5],
      data: [
        0.08939514,  -1.5887482,  0.8545348,   0.20523034,  -0.41728342,
        1.01752,     0.19677015,  0.5398451,   0.56893295,  1.2511084,
        2.0092728,   1.0606714,   0.4893267,   0.09536829,  -2.3467007,
        2.4527607,   0.61307395,  -1.0799897,  -0.15071101, -0.48422927,
        -0.20479254, 0.32798728,  -0.37435308, -1.7116562,  1.6952512,
        -0.7479369,  -0.09019202, 0.14343949,  1.6754607,   1.6427531,
        0.9470988,   0.20872667,  -1.9530525,  -0.21783416, 0.0309498,
        0.3008434,   1.1686599,   1.4920886,   0.06633294,  0.6674667,
        0.60627925,  0.04302086,  -0.03482966, -0.7343786,  -0.76851964,
        0.9446942,   -0.35489243, 0.44452578,  0.00648887,  -0.55656946,
        -0.735903,   0.22050636,  -0.5008282,  -1.3132697,  1.6642882,
        -0.48397836, 0.20099205,  -0.28786168, 1.3315053,   -0.41619393,
      ],
    };
    const b = {
      shape: [3, 4, 5],
      data: [
          -0.5781865,  -0.49248728, -0.2162451,  -0.13176449, -0.52118045,
          1.9125274,   0.6508799,   0.71873736,  -2.3154447,  0.8080079,
          0.3022368,   0.21394566,  -0.6511544,  0.20001237,  -0.08041809,
          1.1127822,   -1.521739,   0.7249548,   -0.91961324, -0.83175105,
          -1.4569077,  -0.5417681,  -1.6476909,  0.1223801,   2.220618,
          -0.14914903, 0.7790501,   -0.18711103, -0.9941537,  -1.828552,
          -1.36035,    0.5727087,   2.5213664,   -0.3267195,  0.8431539,
          0.12337407,  1.0018097,   -0.23469485, -0.4530751,  0.09238022,
          0.7888511,   0.11107288,  0.48171726,  0.34308678,  -0.90550417,
          0.203841,    0.02521433,  -1.7966009,  -1.4287543,  0.3222213,
          1.0590587,   -1.7948701,  -1.7195907,  -0.9120889,  -0.9391962,
          -0.2566791,  -0.5464537,  1.4351872,   0.5705938,   -0.30327085,
      ],
    };
    const expected = {
      shape: [3, 4, 5],
      data: [
        -0.48879136000000006,
        -2.08123548,
        0.6382897000000001,
        0.07346585,
        -0.9384638700000001,
        2.9300474000000003,
        0.8476500499999999,
        1.25858246,
        -1.74651175,
        2.0591163,
        2.3115096000000004,
        1.27461706,
        -0.16182770000000002,
        0.29538065999999996,
        -2.4271187899999997,
        3.5655428999999996,
        -0.90866505,
        -0.35503490000000004,
        -1.07032425,
        -1.31598032,
        -1.6617002399999998,
        -0.21378081999999998,
        -2.02204398,
        -1.5892761,
        3.9158692,
        -0.89708593,
        0.6888580799999999,
        -0.04367154000000001,
        0.6813069999999999,
        -0.1857989,
        -0.41325119999999993,
        0.78143537,
        0.5683138999999997,
        -0.54455366,
        0.8741037,
        0.42421747,
        2.1704695999999997,
        1.2573937499999999,
        -0.38674216,
        0.75984692,
        1.39513035,
        0.15409374,
        0.4468876,
        -0.39129182,
        -1.67402381,
        1.1485352,
        -0.3296781,
        -1.35207512,
        -1.42226543,
        -0.23434815999999997,
        0.32315570000000005,
        -1.57436374,
        -2.2204189,
        -2.2253586,
        0.7250920000000001,
        -0.74065746,
        -0.34546165000000006,
        1.14732552,
        1.9020991,
        -0.71946478,
      ],
    };
    const aBroadcast = {
      shape: [3, 4, 5],
      data: [
        -0.08539673, 0.11800674,  -1.2358714,  0.30089188,  -0.73443925,
        1.4894297,   0.16823359,  -2.2034893,  1.0740992,   -0.35457978,
        0.61524934,  0.462153,    0.5992003,   -0.81047946, -2.2757835,
        -0.21841764, 1.1650828,   -0.56927145, 1.9960726,   0.62048405,
        0.10586528,  -1.0386543,  -1.9402571,  -2.0906122,  -0.4305259,
        -1.2730165,  1.5639576,   0.53357494,  -0.8079486,  -0.06450062,
        -0.7841324,  -0.24135855, 1.9275267,   0.4476717,   0.15467685,
        -1.2363592,  -0.50745815, 0.03250425,  0.86344534,  -0.7938714,
        1.1835734,   1.515135,    0.3092435,   -1.311751,   -0.6659017,
        0.8815683,   -0.31157655, 0.57511795,  -1.1924151,  -1.8408557,
        -0.85080767, -1.3341717,  0.54687303,  -0.14426671, -0.15728855,
        0.323939,    1.167636,    0.03020451,  0.91373825,  1.0675793,
      ],
    };
    const bBroadcast = {
      shape: [5],
      data: [
        0.6338172,
        1.630534,
        -1.3819867,
        -1.0427561,
        1.058136,
      ],
    };
    const expectedBroadcast = {
      shape: [3, 4, 5],
      data: [
        0.5484204699999999,
        1.74854074,
        -2.6178581,
        -0.7418642200000001,
        0.32369675,
        2.1232469,
        1.79876759,
        -3.585476,
        0.03134309999999996,
        0.70355622,
        1.2490665399999998,
        2.0926869999999997,
        -0.7827863999999999,
        -1.8532355600000001,
        -1.2176475000000002,
        0.41539956,
        2.7956168,
        -1.95125815,
        0.9533164999999999,
        1.67862005,
        0.7396824799999999,
        0.5918797,
        -3.3222438,
        -3.1333683,
        0.6276101,
        -0.6391993,
        3.1944916,
        -0.8484117599999998,
        -1.8507047,
        0.99363538,
        -0.15031519999999998,
        1.38917545,
        0.5455400000000001,
        -0.5950844000000001,
        1.21281285,
        -0.6025420000000001,
        1.1230758499999998,
        -1.34948245,
        -0.17931076000000012,
        0.26426459999999996,
        1.8173906,
        3.145669,
        -1.0727432,
        -2.3545071,
        0.3922342999999999,
        1.5153854999999998,
        1.3189574499999999,
        -0.8068687499999999,
        -2.2351712,
        -0.7827197000000001,
        -0.21699047000000005,
        0.29636229999999997,
        -0.8351136699999999,
        -1.18702281,
        0.90084745,
        0.9577562,
        2.79817,
        -1.35178219,
        -0.1290178500000001,
        2.1257153,
      ],
    };

    promise_test(async () => {
      await testBinary(isSync, 'add', a, b, false, expected);
    }, `add two inputs  / ${deviceType} / ${executionType}`);

    promise_test(async () => {
      await testBinary(isSync, 'add', a, b, true, expected);
    }, `add input and constant  / ${deviceType} / ${executionType}`);

    promise_test(async () => {
      await testBinary(isSync, 'add', aBroadcast, bBroadcast, false, expectedBroadcast);
      await testBinary(isSync, 'add', aBroadcast, bBroadcast, true, expectedBroadcast);
    }, `add broadcast  / ${deviceType} / ${executionType}`);

    // data for testing sub op
    const sa = {
      shape: [3, 4, 5],
      data: [
        1.7640524,   0.4001572,  0.978738,    2.2408931,   1.867558,
        -0.9772779,  0.95008844, -0.1513572,  -0.10321885, 0.41059852,
        0.14404356,  1.4542735,  0.7610377,   0.12167501,  0.44386324,
        0.33367434,  1.4940791,  -0.20515826, 0.3130677,   -0.85409576,
        -2.5529897,  0.6536186,  0.8644362,   -0.742165,   2.2697546,
        -1.4543657,  0.04575852, -0.18718386, 1.5327792,   1.4693588,
        0.15494743,  0.37816253, -0.88778573, -1.9807965,  -0.34791216,
        0.15634897,  1.2302907,  1.2023798,   -0.3873268,  -0.30230275,
        -1.048553,   -1.420018,  -1.7062702,  1.9507754,   -0.5096522,
        -0.4380743,  -1.2527953, 0.7774904,   -1.6138978,  -0.21274029,
        -0.89546657, 0.3869025,  -0.51080513, -1.1806322,  -0.02818223,
        0.42833188,  0.06651722, 0.3024719,   -0.6343221,  -0.36274117,
      ],
    };
    const sb = {
      shape: [3, 4, 5],
      data: [
        -0.67246044, -0.35955316, -0.8131463,  -1.7262826,  0.17742614,
        -0.40178093, -1.6301984,  0.46278226,  -0.9072984,  0.0519454,
        0.7290906,   0.12898292,  1.1394007,   -1.2348258,  0.40234163,
        -0.6848101,  -0.87079716, -0.5788497,  -0.31155252, 0.05616534,
        -1.1651498,  0.9008265,   0.46566245,  -1.5362437,  1.4882522,
        1.8958892,   1.1787796,   -0.17992483, -1.0707526,  1.0544517,
        -0.40317693, 1.222445,    0.20827498,  0.97663903,  0.3563664,
        0.7065732,   0.01050002,  1.7858706,   0.12691209,  0.40198937,
        1.8831507,   -1.347759,   -1.270485,   0.9693967,   -1.1731234,
        1.9436212,   -0.41361898, -0.7474548,  1.922942,    1.4805148,
        1.867559,    0.90604466,  -0.86122566, 1.9100649,   -0.26800337,
        0.8024564,   0.947252,    -0.15501009, 0.61407936,  0.9222067,
      ],
    };
    const sexpected = {
      shape: [3, 4, 5],
      data: [
        2.43651284,
        0.7597103599999999,
        1.7918843,
        3.9671757000000003,
        1.6901318600000002,
        -0.5754969700000001,
        2.5802868400000003,
        -0.61413946,
        0.80407955,
        0.35865312000000005,
        -0.5850470400000001,
        1.3252905799999999,
        -0.3783629999999999,
        1.35650081,
        0.04152160999999999,
        1.01848444,
        2.36487626,
        0.37369144,
        0.62462022,
        -0.9102610999999999,
        -1.3878399,
        -0.24720789999999992,
        0.39877375,
        0.7940787,
        0.7815024000000002,
        -3.3502549000000004,
        -1.13302108,
        -0.00725903,
        2.6035318,
        0.4149071,
        0.55812436,
        -0.84428247,
        -1.0960607100000002,
        -2.95743553,
        -0.7042785600000001,
        -0.55022423,
        1.21979068,
        -0.5834907999999999,
        -0.51423889,
        -0.7042921200000001,
        -2.9317037,
        -0.07225900000000007,
        -0.4357852,
        0.9813786999999999,
        0.6634711999999999,
        -2.3816955,
        -0.83917632,
        1.5249452,
        -3.5368398,
        -1.6932550899999999,
        -2.76302557,
        -0.5191421599999999,
        0.35042052999999995,
        -3.0906971,
        0.23982114000000002,
        -0.37412451999999996,
        -0.8807347799999999,
        0.45748199,
        -1.24840146,
        -1.28494787,
      ],
    };
    const saBroadcast = {
      shape: [3, 4, 5],
      data: [
        0.37642553,  -1.0994008,  0.2982382,   1.3263859,   -0.69456786,
        -0.14963454, -0.43515354, 1.8492638,   0.67229474,  0.40746182,
        -0.76991606, 0.5392492,   -0.6743327,  0.03183056,  -0.6358461,
        0.67643327,  0.57659084,  -0.20829876, 0.3960067,   -1.0930616,
        -1.4912575,  0.4393917,   0.1666735,   0.63503146,  2.3831449,
        0.94447947,  -0.91282225, 1.1170163,   -1.3159074,  -0.4615846,
        -0.0682416,  1.7133427,   -0.74475485, -0.82643855, -0.09845252,
        -0.6634783,  1.1266359,   -1.0799315,  -1.1474687,  -0.43782005,
        -0.49803245, 1.929532,    0.9494208,   0.08755124,  -1.2254355,
        0.844363,    -1.0002153,  -1.5447711,  1.1880298,   0.3169426,
        0.9208588,   0.31872764,  0.8568306,   -0.6510256,  -1.0342429,
        0.6815945,   -0.80340964, -0.6895498,  -0.4555325,  0.01747916,
      ],
    };
    const sbBroadcast = {
      shape: [5],
      data: [
        -0.35399392,
        -1.3749512,
        -0.6436184,
        -2.2234032,
        0.62523144,
      ],
    };
    const sexpectedBroadcast = {
      shape: [3, 4, 5],
      data: [
        0.7304194500000001,
        0.2755504,
        0.9418566,
        3.5497891,
        -1.3197993000000001,
        0.20435938,
        0.93979766,
        2.4928822,
        2.89569794,
        -0.21776962,
        -0.41592214,
        1.9142004,
        -0.030714299999999972,
        2.25523376,
        -1.26107754,
        1.03042719,
        1.95154204,
        0.43531964,
        2.6194099,
        -1.7182930399999998,
        -1.13726358,
        1.8143429,
        0.8102919000000001,
        2.85843466,
        1.7579134600000001,
        1.29847339,
        0.46212895,
        1.7606347,
        0.9074958,
        -1.08681604,
        0.28575232,
        3.0882939,
        -0.10113644999999993,
        1.39696465,
        -0.72368396,
        -0.30948437999999995,
        2.5015871,
        -0.4363131,
        1.0759345,
        -1.0630514899999999,
        -0.14403853,
        3.3044832,
        1.5930392,
        2.3109544399999997,
        -1.85066694,
        1.19835692,
        0.3747358999999999,
        -0.9011526999999999,
        3.4114329999999997,
        -0.30828883999999995,
        1.27485272,
        1.69367884,
        1.5004490000000001,
        1.5723775999999998,
        -1.65947434,
        1.03558842,
        0.5715415599999999,
        -0.045931399999999956,
        1.7678707,
        -0.6077522799999999,
      ],
    };

    promise_test(async () => {
      await testBinary(isSync, 'sub', sa, sb, false, sexpected);
    }, `sub two inputs  / ${deviceType} / ${executionType}`);

    promise_test(async () => {
      await testBinary(isSync, 'sub', sa, sb, true, sexpected);
    }, `sub input and constant  / ${deviceType} / ${executionType}`);

    promise_test(async () => {
      await testBinary(isSync, 'sub', saBroadcast, sbBroadcast, false, sexpectedBroadcast);
      await testBinary(isSync, 'sub', saBroadcast, sbBroadcast, true, sexpectedBroadcast);
    }, `sub broadcast  / ${deviceType} / ${executionType}`);

    // data for testing mul op
    const ma = {
      shape: [3, 4, 5],
      data: [
        5.6232101e-01,  1.3117781e-01,  -1.4161869e+00, 2.0386910e-02,
        9.1077393e-01,  7.4952751e-01,  -2.8509337e-01, -1.6272701e+00,
        1.0271618e+00,  4.2815253e-01,  -7.7895027e-01, 9.7542489e-01,
        3.9352554e-01,  9.7878903e-01,  -6.0965502e-01, 6.6299748e-01,
        -1.1980454e+00, -7.7857232e-01, -9.8175555e-01, -2.8763762e-01,
        -3.2260692e-01, -7.4259090e-01, -1.0055183e+00, -1.4305019e+00,
        6.0624069e-01,  -1.5911928e-01, 4.5598033e-01,  1.0880016e-01,
        1.4949993e+00,  6.6210419e-01,  -5.6889033e-01, -2.0945708e-01,
        -7.1049523e-01, -2.8507587e-01, 1.1723405e+00,  -6.3937567e-02,
        -5.4250038e-01, -1.2398884e+00, -1.0347517e+00, 1.2763804e+00,
        -1.5979607e+00, -5.8152825e-01, -5.0100851e-01, -1.0742084e+00,
        -1.1273566e+00, 3.4815140e-04,  -5.6024802e-01, 1.0848801e+00,
        -5.1780093e-01, -3.8996863e-01, 5.3133094e-01,  2.3897937e-01,
        -1.3832775e+00, 6.3414145e-01,  1.0691971e+00,  5.7040757e-01,
        3.0711100e-01,  8.8405716e-01,  -2.1583509e+00, 4.3243581e-01,
      ],
    };
    const mb = {
      shape: [3, 4, 5],
      data: [
        2.0435283,  0.07213961,  -1.1644137,  -1.2209045,  0.8982674,
        0.21796915, 0.27658972,  0.7744382,   -0.52159035, -0.969913,
        0.6081186,  -0.04225572, 0.3275312,   -0.06443629, -2.257355,
        1.7802691,  -1.279233,   -3.1389477,  -1.1663845,  -0.79485595,
        0.679013,   1.0919031,   0.51905185,  1.3186365,   0.6612518,
        0.40741763, 0.05208012,  0.16548257,  -0.4570541,  0.10149371,
        0.08249464, 0.3992067,   -0.3945879,  -0.37389037, 1.4760005,
        -0.781274,  -0.49022308, 0.27020553,  -0.2356837,  0.13846985,
        0.9767852,  -1.3560135,  0.78826934,  -0.18788454, 0.38178417,
        0.9748209,  1.0242884,   0.7939937,   0.24449475,  -1.3840157,
        1.9665064,  0.35833818,  -0.87076694, -0.76727265, 0.6157508,
        -0.5558823, 0.18417479,  -0.93904793, -0.00859687, 0.5034271,
      ],
    };
    const mexpected = {
      shape: [3, 4, 5],
      data: [
        1.1491188976195832,
        0.009463116054054102,
        1.6490274281205302,
        -0.024890470160095,
        0.818118530088882,
        0.1633738742563165,
        -0.0788538953821564,
        -1.26022012715782,
        -0.53575768276863,
        -0.41527070482989,
        -0.47369414766202195,
        -0.0412172810328708,
        0.128891892346848,
        -0.06306953378589869,
        1.3762078076721,
        1.180313927021868,
        1.5325792111782002,
        2.443897793147664,
        1.145104456308975,
        0.22863047370083897,
        -0.21905429256996,
        -0.81083730574179,
        -0.521916133823855,
        -1.88631201865935,
        0.400877747495742,
        -0.0648279999449064,
        0.0237475103040396,
        0.0180045300932112,
        -0.68329555956213,
        0.0671994106496449,
        -0.046930402972831194,
        -0.08361666969843601,
        0.280352820765717,
        0.10658712251237192,
        1.73037516417025,
        0.049952758720358,
        0.2659462071847704,
        -0.335024702262852,
        0.24387410923728997,
        0.17674020253094003,
        -1.56086436194164,
        0.788560157631375,
        -0.3949296475120834,
        0.201827151098136,
        -0.43040690382502195,
        0.00033938526108426,
        -0.573855548008968,
        0.8613879646553699,
        -0.1265996089301175,
        0.539722706427491,
        1.044865694028016,
        0.0856354325033466,
        1.20451231584585,
        -0.4865593908163425,
        0.65835896968268,
        -0.31707947194901104,
        0.056562103931690005,
        -0.8301720460996788,
        0.018555062101682996,
        0.217699905764451,
      ],
    };
    const maBroadcast = {
      shape: [3, 4, 5],
      data: [
        -0.08539673, 0.11800674,  -1.2358714,  0.30089188,  -0.73443925,
        1.4894297,   0.16823359,  -2.2034893,  1.0740992,   -0.35457978,
        0.61524934,  0.462153,    0.5992003,   -0.81047946, -2.2757835,
        -0.21841764, 1.1650828,   -0.56927145, 1.9960726,   0.62048405,
        0.10586528,  -1.0386543,  -1.9402571,  -2.0906122,  -0.4305259,
        -1.2730165,  1.5639576,   0.53357494,  -0.8079486,  -0.06450062,
        -0.7841324,  -0.24135855, 1.9275267,   0.4476717,   0.15467685,
        -1.2363592,  -0.50745815, 0.03250425,  0.86344534,  -0.7938714,
        1.1835734,   1.515135,    0.3092435,   -1.311751,   -0.6659017,
        0.8815683,   -0.31157655, 0.57511795,  -1.1924151,  -1.8408557,
        -0.85080767, -1.3341717,  0.54687303,  -0.14426671, -0.15728855,
        0.323939,    1.167636,    0.03020451,  0.91373825,  1.0675793,
      ],
    };
    const mbBroadcast = {
      shape: [5],
      data: [
        0.6338172,
        1.630534,
        -1.3819867,
        -1.0427561,
        1.058136,
      ],
    };
    const mexpectedBroadcast = {
      shape: [3, 4, 5],
      data: [
        -0.054125916297756,
        0.19241400179916,
        1.70795783771038,
        -0.31375684331046805,
        -0.777136610238,
        0.94402616205084,
        0.27431058843705997,
        3.04519290619231,
        -1.12002349280512,
        -0.37519363009008,
        0.389955613980648,
        0.753556179702,
        -0.82808684523601,
        0.8451324008397061,
        -2.408088449556,
        -0.138436857015408,
        1.8997071182151999,
        0.786725572589715,
        -2.0814168796928603,
        0.6565565107307999,
        0.067099235346816,
        -1.6935611503961998,
        2.68140950678057,
        2.17999862428442,
        -0.4555549537224,
        -0.8068597535837999,
        2.5500860413583997,
        -0.7373934705332981,
        0.8424933311364601,
        -0.06825042804432,
        -0.4969966021972799,
        -0.39354332196569997,
        -2.66381626329489,
        -0.46681239597237006,
        0.1636691433516,
        -0.78362572633824,
        -0.8274277671521001,
        -0.04492044119347499,
        -0.900362895301574,
        -0.8400239077104,
        0.75016917838248,
        2.47047913209,
        -0.42737040406145,
        1.3678363569311,
        -0.7046145612312,
        0.5587531515147599,
        -0.5080361583777,
        -0.7948053578312649,
        1.2433981192571102,
        -1.9478756869752,
        -0.5392565351379239,
        -2.1754123186878,
        -0.7557712540487009,
        0.150434991879431,
        -0.1664326771428,
        0.20531810995079997,
        1.9038701976239998,
        -0.041742231100017,
        -0.952806133990825,
        1.1296440901848,
      ],
    };

    promise_test(async () => {
      await testBinary(isSync, 'mul', ma, mb, false, mexpected);
    }, `mul two inputs  / ${deviceType} / ${executionType}`);

    promise_test(async () => {
      await testBinary(isSync, 'mul', ma, mb, true, mexpected);
    }, `mul input and constant  / ${deviceType} / ${executionType}`);

    promise_test(async () => {
      await testBinary(isSync, 'mul', maBroadcast, mbBroadcast, false, mexpectedBroadcast);
      await testBinary(isSync, 'mul', maBroadcast, mbBroadcast, true, mexpectedBroadcast);
    }, `mul broadcast  / ${deviceType} / ${executionType}`);

    // data for testing div op
    const da = {
      shape: [3, 4, 5],
      data: [
        0.5270042,   0.4537819,   -1.8297404,  0.03700572,  0.76790243,
        0.5898798,   -0.36385882, -0.8056265,  -1.1183119,  -0.13105401,
        1.1330799,   -1.9518042,  -0.6598917,  -1.1398025,  0.7849575,
        -0.5543096,  -0.47063765, -0.21694957, 0.44539326,  -0.392389,
        -3.046143,   0.5433119,   0.43904296,  -0.21954103, -1.0840366,
        0.35178012,  0.37923554,  -0.47003287, -0.21673147, -0.9301565,
        -0.17858909, -1.5504293,  0.41731882,  -0.9443685,  0.23810315,
        -1.405963,   -0.5900577,  -0.11048941, -1.6606998,  0.11514787,
        -0.37914756, -1.7423562,  -1.3032428,  0.60512006,  0.895556,
        -0.13190864, 0.40476182,  0.22384356,  0.32962298,  1.285984,
        -1.5069984,  0.67646074,  -0.38200897, -0.22425893, -0.30224973,
        -0.3751471,  -1.2261962,  0.1833392,   1.670943,    -0.05613302,
      ],
    };
    const db = {
      shape: [3, 4, 5],
      data: [
        0.99861497,  0.312701,   0.88252544,  1.4661665,   0.6297575,
        0.546196,    1.4032645,  0.08199525,  1.2524966,   1.8203218,
        2.3599486,   0.909618,   2.367597,    2.03441,     0.00378734,
        -0.21793854, 0.69503635, 2.0289354,   0.927713,    0.39934242,
        2.5522432,   1.2869045,  -1.3205943,  1.3171606,   1.5200406,
        1.2256087,   1.449712,   0.9327244,   -0.31839585, 0.629296,
        0.05438423,  0.06725907, -0.26306832, 1.4524891,   1.0978961,
        0.55183464,  0.35066205, 0.9765769,   2.0791948,   -1.0042157,
        1.3768766,   0.454288,   -0.88458586, -0.945703,   0.0872165,
        1.2195096,   1.393063,   0.06101841,  2.017021,    2.4229836,
        1.3960866,   0.40859735, 2.1244192,   1.7553957,   1.8674074,
        0.34353632,  -1.8345544, 3.116791,    -0.61087835, 0.9642319,
      ],
    };
    const dexpected = {
      shape: [3, 4, 5],
      data: [
        0.5277351289856991,
        1.4511686882996857,
        -2.0733004591912954,
        0.025239780065906568,
        1.2193621036668878,
        1.0799782495660897,
        -0.25929453784372086,
        -9.825282562099634,
        -0.8928662161637804,
        -0.07199496814244602,
        0.48012905874305906,
        -2.1457405196467088,
        -0.2787179152533138,
        -0.5602619432661067,
        207.2582604149614,
        2.543421645386814,
        -0.6771410588813089,
        -0.10692778587233483,
        0.48009811223945337,
        -0.9825878252553285,
        -1.1935159627421086,
        0.4221850960968743,
        -0.33245862109203406,
        -0.16667749551573285,
        -0.7131629247271422,
        0.2870248228492503,
        0.2615937096471575,
        -0.5039354283001495,
        0.6806981623661239,
        -1.4780905964760622,
        -3.2838396351295223,
        -23.05160181370334,
        -1.5863514846637556,
        -0.6501725210881101,
        0.21687220675982,
        -2.5477976518473,
        -1.6826962027969665,
        -0.11313948753037267,
        -0.7987225631768606,
        -0.11466447895606491,
        -0.2753678579474733,
        -3.8353559856302604,
        1.4732801629906227,
        -0.6398626841619409,
        10.268194665000316,
        -0.10816531497579025,
        0.29055528716217427,
        3.668459404301095,
        0.16342069814840796,
        0.5307439967814888,
        -1.079444785158743,
        1.6555681039047365,
        -0.17981807451184775,
        -0.1277540613777281,
        -0.16185527057459448,
        -1.0920158311063004,
        0.668389119450478,
        0.05882306513333746,
        -2.7353121943182304,
        -0.058215269584007745,
      ],
    };
    const daBroadcast = {
      shape: [3, 4, 5],
      data: [
        2.3807454,   0.33057675,  0.94924647,  -1.5023966,  -1.7776669,
        -0.5327028,  1.0907497,   -0.34624946, -0.7946363,  0.19796729,
        1.0819352,   -1.4449402,  -1.210543,   -0.7886692,  1.0946383,
        0.23482153,  2.1321535,   0.9364457,   -0.03509518, 1.2650778,
        0.21149701,  -0.70492136, 0.67997485,  -0.6963267,  -0.2903971,
        1.3277828,   -0.10128149, -0.8031414,  -0.46433768, 1.0217906,
        -0.55254066, -0.38687086, -0.51029277, 0.1839255,   -0.38548976,
        -1.6018361,  -0.8871809,  -0.932789,   1.2433194,   0.81267405,
        0.58725935,  -0.50535834, -0.81579155, -0.5075176,  -1.0518801,
        2.4972005,   -2.2453218,  0.56400853,  -1.2845523,  -0.10434349,
        -0.98800194, -1.177629,   -1.1401963,  1.7549862,   -0.13298842,
        -0.7657022,  0.55578697,  0.01034931,  0.72003376,  -1.8242567,
      ],
    };
    const dbBroadcast = {
      shape: [5],
      data: [
        1.3041736,
        1.5910654,
        1.9217191,
        1.8052639,
        1.7239413,
      ],
    };
    const dexpectedBroadcast = {
      shape: [3, 4, 5],
      data: [
        1.8254819757124359,
        0.2077706862332623,
        0.49395693158276877,
        -0.832231010657223,
        -1.0311644021754105,
        -0.408460039368992,
        0.6855467411961821,
        -0.18017693636910825,
        -0.4401773613265074,
        0.114834124572571,
        0.8295944650313425,
        -0.9081588978052065,
        -0.629927131389806,
        -0.4368719720147287,
        0.6349626289479811,
        0.1800538900649423,
        1.3400791067419353,
        0.4872958279906777,
        -0.0194404707256374,
        0.733828814240949,
        0.16216936916987126,
        -0.4430498960005039,
        0.35383675480979504,
        -0.3857201708847111,
        -0.16844952899498378,
        1.0181028047186358,
        -0.06365639652524654,
        -0.41792861402064435,
        -0.2572131863934132,
        0.5927061437648719,
        -0.4236710971606848,
        -0.24315207910372508,
        -0.2655397295057326,
        0.10188288814726755,
        -0.2236095625761736,
        -1.228238403230981,
        -0.5576017805427734,
        -0.48539300046505235,
        0.6887189180484915,
        0.4714047108216504,
        0.4502923153788729,
        -0.3176226068394172,
        -0.42451133987272127,
        -0.28113208268331297,
        -0.6101600443124137,
        1.9147761463657906,
        -1.4112064783760618,
        0.2934916606698658,
        -0.7115592905834986,
        -0.060526126962675585,
        -0.7575693450626512,
        -0.7401512219422282,
        -0.5933210009725146,
        0.9721493904575392,
        -0.07714208134580916,
        -0.5871167764782235,
        0.34931748877198887,
        0.0053854436894549265,
        0.3988523561569032,
        -1.058189568287505,
      ],
    };

    promise_test(async () => {
      await testBinary(isSync, 'div', da, db, false, dexpected);
    }, `div two inputs  / ${deviceType} / ${executionType}`);

    promise_test(async () => {
      await testBinary(isSync, 'div', da, db, true, dexpected);
    }, `div input and constant  / ${deviceType} / ${executionType}`);

    promise_test(async () => {
      await testBinary(isSync, 'div', daBroadcast, dbBroadcast, false, dexpectedBroadcast);
      await testBinary(isSync, 'div', daBroadcast, dbBroadcast, true, dexpectedBroadcast);
    }, `div broadcast  / ${deviceType} / ${executionType}`);

    // data for testing max op
    const maxA = {
      shape: [3, 4, 5],
      data: [
        0.54270846, 0.3356357,  0.04034169,  1.6710619,   -1.0029255,
        1.4024457,  -0.5183214, -1.5897884,  0.16786452,  -0.92690915,
        -0.8761584, 1.8612522,  0.2960607,   0.11604685,  0.2686291,
        -0.5718065, 0.4856556,  -1.2307562,  -1.7977105,  -1.1370704,
        1.0383102,  -1.0015849, -1.367141,   0.32427165,  1.2968429,
        1.3039074,  -0.6295407, 1.1250858,   1.0206878,   -0.769062,
        0.96548617, 1.9100864,  2.1261373,   0.8835118,   -0.66880584,
        0.9088927,  1.8120629,  -0.25648043, 0.15793198,  -1.5175776,
        0.08734574, 0.9441932,  -1.0558261,  0.1276651,   -2.9616504,
        2.1102998,  0.58067006, -0.7349921,  -0.28586444, -0.92654175,
        -0.507083,  -1.8776977, 0.57921827,  1.460351,    1.4930215,
        -0.757663,  1.0773797,  -1.1858964,  -0.5337765,  0.27636543,
      ],
    };
    const maxB = {
      shape: [3, 4, 5],
      data: [
        -0.00724315, -1.4088361,  0.17466596,  1.1395162,   1.3720452,
        -0.35610083, -0.5597993,  -0.26632488, -0.31922337, -0.2980101,
        0.12268824,  -1.1521344,  -1.0502838,  0.85281086,  -0.83374727,
        0.00551354,  0.08081324,  -0.13748081, 0.59067047,  -0.20894054,
        -0.9008378,  -0.06121079, -1.8927814,  -0.5113896,  2.0618987,
        -0.09704968, 1.9003097,   -0.27883208, -0.9971944,  -1.0472671,
        0.995112,    0.83037376,  1.5058613,   0.51366556,  0.4476341,
        1.0389726,   -0.04508441, -0.2180115,  0.3973936,   0.58917326,
        2.3834932,   0.71679467,  0.06214673,  -0.09415992, 0.9173279,
        0.55409455,  0.6537859,   -1.1739589,  1.1591603,   0.5907742,
        -1.0454807,  -0.8065648,  2.0162134,   -0.30215183, 0.67375183,
        1.6682644,   -2.916385,   0.43166366,  -0.7290503,  0.11509943,
      ],
    };
    const maxExpected = {
      shape: [3, 4, 5],
      data: [
        0.54270846, 0.3356357,   0.17466596, 1.6710619,   1.3720452,  1.4024457,
        -0.5183214, -0.26632488, 0.16786452, -0.2980101,  0.12268824, 1.8612522,
        0.2960607,  0.85281086,  0.2686291,  0.00551354,  0.4856556,  -0.13748081,
        0.59067047, -0.20894054, 1.0383102,  -0.06121079, -1.367141,  0.32427165,
        2.0618987,  1.3039074,   1.9003097,  1.1250858,   1.0206878,  -0.769062,
        0.995112,   1.9100864,   2.1261373,  0.8835118,   0.4476341,  1.0389726,
        1.8120629,  -0.2180115,  0.3973936,  0.58917326,  2.3834932,  0.9441932,
        0.06214673, 0.1276651,   0.9173279,  2.1102998,   0.6537859,  -0.7349921,
        1.1591603,  0.5907742,   -0.507083,  -0.8065648,  2.0162134,  1.460351,
        1.4930215,  1.6682644,   1.0773797,  0.43166366,  -0.5337765, 0.27636543,
      ],
    };
    const maxABroadcast = {
      shape: [3, 4, 5],
      data: [
        -0.78042406, -0.18523395, -0.12612817, -0.24858657, 0.36215156,
        -0.41349608, 1.540389,    1.9143543,   0.4806893,   0.0123093,
        1.2142435,   -0.57421523, -2.1229508,  1.1247561,   0.11206079,
        0.5191412,   -0.2109448,  -0.97485703, 0.6992101,   1.0161952,
        -0.19765139, 0.34198883,  -0.24741505, 1.5920583,   0.56292,
        0.09105966,  0.82438636,  -0.2996084,  -0.97498095, 1.9305013,
        1.4938543,   0.01099077,  0.7837045,   0.6621192,   0.9520401,
        -0.63094735, -1.4202772,  2.6008792,   -0.3047365,  -0.58313465,
        -0.37956452, -0.14322324, -1.2261407,  -1.1514657,  -0.28318587,
        -0.06985976, 0.48337674,  0.99673945,  -0.54980195, -1.7497128,
        0.62820524,  1.0456259,   0.16508068,  0.5966878,   0.7607826,
        0.9664813,   -0.13389224, -0.5757679,  0.38655168,  -0.39935285,
      ],
    };
    const maxBBroadcast = {
      shape: [5],
      data: [
        0.67538136,
        0.3535401,
        1.0303422,
        -0.50294054,
        -0.25600532,
      ],
    };
    const maxExpectedBroadcast = {
      shape: [3, 4, 5],
      data: [
        0.67538136, 0.3535401,  1.0303422, -0.24858657, 0.36215156,
        0.67538136, 1.540389,   1.9143543, 0.4806893,   0.0123093,
        1.2142435,  0.3535401,  1.0303422, 1.1247561,   0.11206079,
        0.67538136, 0.3535401,  1.0303422, 0.6992101,   1.0161952,
        0.67538136, 0.3535401,  1.0303422, 1.5920583,   0.56292,
        0.67538136, 0.82438636, 1.0303422, -0.50294054, 1.9305013,
        1.4938543,  0.3535401,  1.0303422, 0.6621192,   0.9520401,
        0.67538136, 0.3535401,  2.6008792, -0.3047365,  -0.25600532,
        0.67538136, 0.3535401,  1.0303422, -0.50294054, -0.25600532,
        0.67538136, 0.48337674, 1.0303422, -0.50294054, -0.25600532,
        0.67538136, 1.0456259,  1.0303422, 0.5966878,   0.7607826,
        0.9664813,  0.3535401,  1.0303422, 0.38655168,  -0.25600532,
      ],
    };

    promise_test(async () => {
      await testBinary(isSync, 'max', maxA, maxB, false, maxExpected);
    }, `max two inputs  / ${deviceType} / ${executionType}`);

    promise_test(async () => {
      await testBinary(isSync, 'max', maxA, maxB, true, maxExpected);
    }, `max input and constant  / ${deviceType} / ${executionType}`);

    promise_test(async () => {
      await testBinary(isSync, 'max', maxABroadcast, maxBBroadcast, false, maxExpectedBroadcast);
      await testBinary(isSync, 'max', maxABroadcast, maxBBroadcast, true, maxExpectedBroadcast);
    }, `max broadcast  / ${deviceType} / ${executionType}`);

    // data for testing min op
    const minA = {
      shape: [3, 4, 5],
      data: [
        0.30360392,  0.79021126,  0.11072686,  1.0779074,   -0.02202512,
        -0.4660466,  0.5439212,   -1.1046865,  -0.7237214,  1.7275667,
        0.05005725,  0.03450501,  -0.93030375, 0.8889801,   1.6954619,
        -0.01362751, -0.276192,   0.05534686,  1.046008,    0.10164198,
        0.5601633,   -0.32077986, -0.59266484, -0.39202943, -0.03543149,
        -0.311161,   -2.6089416,  0.5112193,   -1.4783202,  -0.8066068,
        0.77324635,  1.5120724,   1.3049824,   -0.03303701, 1.201271,
        -0.08360443, -1.0856549,  -1.268517,   -0.77472717, -0.6026987,
        -0.37952536, -1.1476341,  0.08269309,  1.0225683,   -1.4790517,
        1.9010514,   -0.8733177,  -0.08186013, 1.1718949,   -0.01093488,
        -0.3274254,  0.73195547,  -0.5514492,  -0.7521337,  -1.0613606,
        0.6751333,   0.9138903,   1.7775172,   0.5034791,   0.00691956,
      ],
    };
    const minB = {
      shape: [3, 4, 5],
      data: [
        -0.3013072,  -0.09710764, 0.19347863,  0.57673335,  -0.9459303,
        -0.311303,   -0.51731133, 0.05566696,  0.1896354,   -2.4551184,
        0.49731326,  -0.505013,   0.38610065,  -0.46502006, 0.11969721,
        0.52275103,  0.25405633,  -2.177016,   0.36703554,  0.33286744,
        -0.49586803, 0.09411436,  0.38203833,  -1.8008012,  0.4627897,
        -0.14300857, 0.26225486,  0.10055642,  1.5006567,   -0.04743041,
        -0.7460712,  -1.3833494,  -0.2873905,  -1.8731467,  -1.006253,
        -0.21216351, -1.2171068,  0.1594863,   -1.7146875,  0.21852039,
        1.3147641,   0.28219756,  -0.84008366, -0.979971,   0.2722022,
        1.1494406,   -1.4083267,  0.09631079,  -0.04712944, -0.8959271,
        1.2020742,   -0.24440259, 0.18198308,  -1.3384086,  -0.5169678,
        -0.6608337,  0.30539933,  -1.529869,   -0.70533603, -2.1911235,
      ],
    };
    const minExpected = {
      shape: [3, 4, 5],
      data: [
        -0.3013072,  -0.09710764, 0.11072686,  0.57673335,  -0.9459303,
        -0.4660466,  -0.51731133, -1.1046865,  -0.7237214,  -2.4551184,
        0.05005725,  -0.505013,   -0.93030375, -0.46502006, 0.11969721,
        -0.01362751, -0.276192,   -2.177016,   0.36703554,  0.10164198,
        -0.49586803, -0.32077986, -0.59266484, -1.8008012,  -0.03543149,
        -0.311161,   -2.6089416,  0.10055642,  -1.4783202,  -0.8066068,
        -0.7460712,  -1.3833494,  -0.2873905,  -1.8731467,  -1.006253,
        -0.21216351, -1.2171068,  -1.268517,   -1.7146875,  -0.6026987,
        -0.37952536, -1.1476341,  -0.84008366, -0.979971,   -1.4790517,
        1.1494406,   -1.4083267,  -0.08186013, -0.04712944, -0.8959271,
        -0.3274254,  -0.24440259, -0.5514492,  -1.3384086,  -1.0613606,
        -0.6608337,  0.30539933,  -1.529869,   -0.70533603, -2.1911235,
      ],
    };
    const minABroadcast = {
      shape: [3, 4, 5],
      data: [
        0.09259097,  -1.2761278,  0.63461846,  0.83395857,  -0.6424096,
        -0.10002025, 0.2483844,   1.324728,    0.7070375,   -0.24927127,
        -1.1588863,  0.05159701,  -0.27449006, 1.3718864,   -0.2961051,
        -0.21801688, 0.4596571,   -0.2982913,  -2.4248464,  0.25273538,
        0.04604488,  -0.87013924, 1.554572,    0.41449285,  -0.68581927,
        0.21872331,  0.5650471,   -1.3366132,  -0.34167227, 1.4196033,
        -0.9094157,  0.5909053,   0.20646141,  0.23326884,  0.27068487,
        -0.2444074,  0.44961262,  -1.3790505,  -1.4981223,  1.9089019,
        0.6859794,   -1.6197531,  -0.85252583, 0.3867299,   0.9107394,
        0.63347656,  -2.0192556,  0.49276412,  0.5069547,   0.14318226,
        -0.5055633,  -1.2882828,  0.00957129,  0.41766334,  -0.53743577,
        0.3123349,   0.04377401,  -0.26201916, -1.6016098,  -0.74272215,
      ],
    };
    const minBBroadcast = {
      shape: [5],
      data: [
        0.6450575,
        -1.302236,
        0.27485028,
        1.8353013,
        -0.83993983,
      ],
    };
    const minExpectedBroadcast = {
      shape: [3, 4, 5],
      data: [
        0.09259097,  -1.302236,  0.27485028,  0.83395857,  -0.83993983,
        -0.10002025, -1.302236,  0.27485028,  0.7070375,   -0.83993983,
        -1.1588863,  -1.302236,  -0.27449006, 1.3718864,   -0.83993983,
        -0.21801688, -1.302236,  -0.2982913,  -2.4248464,  -0.83993983,
        0.04604488,  -1.302236,  0.27485028,  0.41449285,  -0.83993983,
        0.21872331,  -1.302236,  -1.3366132,  -0.34167227, -0.83993983,
        -0.9094157,  -1.302236,  0.20646141,  0.23326884,  -0.83993983,
        -0.2444074,  -1.302236,  -1.3790505,  -1.4981223,  -0.83993983,
        0.6450575,   -1.6197531, -0.85252583, 0.3867299,   -0.83993983,
        0.63347656,  -2.0192556, 0.27485028,  0.5069547,   -0.83993983,
        -0.5055633,  -1.302236,  0.00957129,  0.41766334,  -0.83993983,
        0.3123349,   -1.302236,  -0.26201916, -1.6016098,  -0.83993983,
      ],
    };

    promise_test(async () => {
      await testBinary(isSync, 'min', minA, minB, false, minExpected);
    }, `min two inputs  / ${deviceType} / ${executionType}`);

    promise_test(async () => {
      await testBinary(isSync, 'min', minA, minB, true, minExpected);
    }, `min input and constant  / ${deviceType} / ${executionType}`);

    promise_test(async () => {
      await testBinary(isSync, 'min', minABroadcast, minBBroadcast, false, minExpectedBroadcast);
      await testBinary(isSync, 'min', minABroadcast, minBBroadcast, true, minExpectedBroadcast);
    }, `min broadcast  / ${deviceType} / ${executionType}`);

    // data for testing pow op
    const sqrt1DA = { // sqrt is equal to pow with exponent=0.5
      shape: [3],
      data: [1, 4, 9],
    };
    const sqrt1DB = {
      shape: [1],
      data: [0.5],
    };
    const sqrt1DExpected = {
      shape: [3],
      data: [1, 2, 3],
    };
    const sqrt3DA = {
      shape: [3, 4, 5],
      data: [
        0.33435354, 0.57139647, 0.03689031, 0.7820907,  0.7718887,
        0.17709309, 1.05624,    2.2693596,  1.0328789,  1.6043026,
        2.0692635,  1.7839943,  1.4888871,  0.57544494, 0.2760935,
        0.25916228, 0.24607088, 0.75507194, 0.9365655,  0.66641825,
        0.1919839,  0.42336762, 1.1776822,  1.8486708,  0.7361624,
        0.28052628, 0.261271,   1.0593715,  0.54762685, 0.61064255,
        0.6917134,  0.3692974,  0.01287235, 0.6559981,  0.32968605,
        1.9361054,  1.5982035,  0.49353063, 0.28142217, 0.55740887,
        0.43017766, 2.6145968,  0.4801058,  0.7487864,  1.0473998,
        0.11505236, 0.24899477, 0.21978393, 0.21973193, 0.6550839,
        0.7919175,  0.21990986, 0.2881369,  0.5660939,  0.54675615,
        0.70638055, 0.82219034, 0.6266006,  0.89149487, 0.36557788,
      ],
    };

    const sqrt3DExpected = {
      shape: [3, 4, 5],
      data: [
        0.5782331,  0.7559077,  0.1920685,  0.88435894, 0.8785719,
        0.4208243,  1.0277354,  1.5064393,  1.0163065,  1.2666107,
        1.4384935,  1.3356625,  1.2201996,  0.75858086, 0.525446,
        0.5090798,  0.4960553,  0.86894876, 0.9677631,  0.81634444,
        0.43815967, 0.6506671,  1.0852107,  1.3596584,  0.8579991,
        0.5296473,  0.5111467,  1.0292578,  0.7400181,  0.7814362,
        0.8316931,  0.60769844, 0.11345637, 0.8099371,  0.5741829,
        1.39144,    1.2642008,  0.70251733, 0.53049237, 0.7465982,
        0.6558793,  1.6169715,  0.69289666, 0.86532444, 1.0234255,
        0.3391937,  0.49899375, 0.46881118, 0.46875572, 0.80937254,
        0.88989747, 0.46894547, 0.5367839,  0.7523921,  0.7394296,
        0.8404645,  0.9067471,  0.7915811,  0.9441901,  0.60463035,
      ],
    };

    promise_test(async () => {
      await testBinary(isSync, 'pow', sqrt1DA, sqrt1DB, false, sqrt1DExpected);
    }, `sqrt (pow with exponent=0.5) two 1D inputs  / ${deviceType} / ${executionType}`);

    promise_test(async () => {
      await testBinary(isSync, 'pow', sqrt1DA, sqrt1DB, true, sqrt1DExpected);
    }, `sqrt (pow with exponent=0.5) 1D input and 1D constant  / ${deviceType} / ${executionType}`);

    promise_test(async () => {
      await testBinary(isSync, 'pow', sqrt3DA, sqrt1DB, false, sqrt3DExpected);
      await testBinary(isSync, 'pow', sqrt3DA, sqrt1DB, true, sqrt3DExpected);
    }, `sqrt (pow with exponent=0.5) broadcast 3D 1D inputs  / ${deviceType} / ${executionType}`);

    const pow1DA = {
      shape: [3],
      data: [1, 2, 3],
    };
    const pow1DB = {
      shape: [3],
      data: [4, 5, 6],
    };
    const pow1DExpected = {
      shape: [3],
      data: [1, 32, 729],
    };
    const pow1DBBroadcat = {
      shape: [1],
      data: [2],
    };
    const pow1DExpectedBroadcast = {
      shape: [3],
      data: [1, 4, 9],
    };
    const pow2DA = {
      shape: [2, 3],
      data: [1, 2, 3, 4, 5, 6],
    };
    const pow2DExpectedBroadcast = {
      shape: [2, 3],
      data: [1, 4, 27, 4, 25, 216],
    };

    promise_test(async () => {
      await testBinary(isSync, 'pow', pow1DA, pow1DB, false, pow1DExpected);
    }, `pow two 1D inputs  / ${deviceType} / ${executionType}`);

    promise_test(async () => {
      await testBinary(isSync, 'pow', pow1DA, pow1DB, true, pow1DExpected);
    }, `pow 1D input and 1D constant  / ${deviceType} / ${executionType}`);

    promise_test(async () => {
      await testBinary(isSync, 'pow', pow1DA, pow1DBBroadcat, false, pow1DExpectedBroadcast);
      await testBinary(isSync, 'pow', pow1DA, pow1DBBroadcat, true, pow1DExpectedBroadcast);
    }, `pow 1D broadcast  / ${deviceType} / ${executionType}`);

    promise_test(async () => {
      await testBinary(isSync, 'pow', pow2DA, pow1DA, false, pow2DExpectedBroadcast);
      await testBinary(isSync, 'pow', pow2DA, pow1DA, true, pow2DExpectedBroadcast);
    }, `pow 2D broadcast  / ${deviceType} / ${executionType}`);
  });
});